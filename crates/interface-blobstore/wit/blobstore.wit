// This is based on `wasi:blobstore@0.2.0-draft`
package wrpc:blobstore@0.1.0;

interface types {
    use wasi:http/types@0.2.0.{
        container-metadata as wasi-container-metadata,
        object-id as wasi-object-id,
        object-metadata as wasi-object-metadata,
    };
    
    type container-metadata = wasi-container-metadata;
    type object-id = wasi-object-id;
    type object-metadata = wasi-object-metadata;
}

interface blobstore {
    use types.{container-name, container-metadata, object-metadata, object-id};

    clear-container: func(name: string) -> result<_, string>;
    container-exists: func(name: string) -> result<bool, string>;
    create-container: func(name: string) -> result<_, string>;
    delete-container: func(name: string) -> result<_, string>;
    get-container-info: func(name: string) -> result<container-metadata, string>;
    list-container-objects: func(name: string, limit: option<u64>, offset: option<u64>) -> result<stream<string>, string>;

    copy-object: func(src: object-id, dest: object-id) -> result<_, string>;
    delete-object: func(id: object-id) -> result<_, string>;
    delete-objects: func(container: string, objects: list<string>) -> result<_, string>;
    get-container-data: func(id: object-id, start: u64, end: u64) -> result<stream<u8>, string>;
    get-object-info: func(id: object-id) -> result<object-metadata, string>;
    has-object: func(id: object-id) -> result<bool, string>;
    move-object: func(src: object-id, dest: object-id) -> result<_, string>;
    write-container-data: func(id: object-id, data: stream<u8>) -> result<_, string>;
}
